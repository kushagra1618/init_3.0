// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UserInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsUserInfo(buf []byte, offset flatbuffers.UOffsetT) *UserInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UserInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *UserInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UserInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UserInfo) Fname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserInfo) Mname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserInfo) Lname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserInfo) Dob() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserInfo) Email() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserInfo) Gender() Gender {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *UserInfo) MutateGender(n Gender) bool {
	return rcv._tab.MutateInt8Slot(14, n)
}

func (rcv *UserInfo) ContactNo(obj *ContactNo) *ContactNo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(ContactNo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *UserInfo) Country() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserInfo) MutateCountry(n int8) bool {
	return rcv._tab.MutateInt8Slot(18, n)
}

func UserInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func UserInfoAddFname(builder *flatbuffers.Builder, fname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(fname), 0)
}
func UserInfoAddMname(builder *flatbuffers.Builder, mname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(mname), 0)
}
func UserInfoAddLname(builder *flatbuffers.Builder, lname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(lname), 0)
}
func UserInfoAddDob(builder *flatbuffers.Builder, dob flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(dob), 0)
}
func UserInfoAddEmail(builder *flatbuffers.Builder, email flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(email), 0)
}
func UserInfoAddGender(builder *flatbuffers.Builder, gender int8) {
	builder.PrependInt8Slot(5, gender, 1)
}
func UserInfoAddContactNo(builder *flatbuffers.Builder, contactNo flatbuffers.UOffsetT) {
	builder.PrependStructSlot(6, flatbuffers.UOffsetT(contactNo), 0)
}
func UserInfoAddCountry(builder *flatbuffers.Builder, country int8) {
	builder.PrependInt8Slot(7, country, 0)
}
func UserInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
